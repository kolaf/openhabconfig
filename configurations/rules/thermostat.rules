import org.openhab.core.library.types.*
import org.openhab.core.library.items.*

import java.util.*
import org.joda.time.* 




rule thermostat_init
when System started
then
	AllThermostats?.members.forEach[t|
		///AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("ThermostatSettings")).filter (l  |l.state == Uninitialized).forEach (j |j.postUpdate
		///AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("HeatingRate")).filter (l  |l.state == Uninitialized).forEach (j |j.postUpdate(2))
		///AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("Hysteresis")).filter (l  |l.state == Uninitialized).forEach (j |j.postUpdate(0.5))
						
	]
	if (ThermostatAway.state==Uninitialized){
		//ThermostatAway.postUpdate(0)
	}
			
	
end

rule check_thermostat
when Time cron  "0 * * * * ?"
then
	val lookahead=4
	
	if (ThermostatAway.state >0){
		var updatedAway=Float::parseFloat(ThermostatAway.state.toString)-0.017
		
		if (updatedAway<0){updatedAway  = 0}
		logDebug("thermostat", "Updating away to  " +updatedAway)
		ThermostatAway.postUpdate(updatedAway)
	}

	AllThermostats?.members.forEach[t|
		logDebug("thermostat",t.name)
		
		var temperatureTarget=AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("ThermostatSettings")).head.state.toString.split(",")
		var heater = AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("Heater")).head
		var heatingRate = AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("HeatingRate")).head.state  as DecimalType
		var currentTemperature=AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("Temperature")).head.state as DecimalType
		var hysteresis=AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("Hysteresis")).head.state as DecimalType
		var now = new DateTime()
		var day= now.getDayOfWeek-1 // tthis function counts 1 from Monday
		var hour=now.getHourOfDay
		var  below = false
		AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("CurrentTarget")).head.postUpdate(Float::parseFloat(temperatureTarget.get(day*24+hour))) 
		for  (i: 1..lookahead*60){
			var future =now.plusMinutes(i)
			var index=((future.getDayOfWeek-1)*24+future.getHourOfDay)
			var countdown=Float::parseFloat(ThermostatAway.state.toString)-(i*0.017)
			//logDebug("thermostat","day " + future.getDayOfWeek + ", hour " +future.getHourOfDay+", index is "+(index))
			var temporaryTarget=Float::parseFloat(temperatureTarget.get(index))
			if (countdown>0){
				temporaryTarget=13
				
				logDebug("thermostat", i +": Currently away,  setting temperature targets to 13")
			}
			//logDebug("thermostat", "Testing for i="+i + ", current temperature is  expected to be " + (Float::parseFloat(currentTemperature.toString)+(i*heatingRate/60)) + " compared to target " + (Float::parseFloat(temperatureTarget.get(index))))
			if((heater.state ==OFF  && (Float::parseFloat(currentTemperature.toString)+(i*heatingRate/60)) 
				< (temporaryTarget- hysteresis))
				 || (heater.state ==ON  && (Float::parseFloat(currentTemperature.toString)+(i*heatingRate/60))
				  < (temporaryTarget+ hysteresis))){
					below = true
					
					//logDebug("thermostat", "We are below")
			}
			//logDebug("thermostat","test")
			//if((Float::parseFloat(currentTemperature.toString)+(i*heatingRate/60)) > Float::parseFloat(temperatureTarget.get(future.getDayOfWeek*24+future.getHourOfDay))+ hysteresis){
			//	if (heater.state!=OFF){
						
					
									
			//	}
			//}
		}
		logDebug("thermostat","done")
		if (below && heater.state!=ON){
			heater.sendCommand(ON)
			logDebug("thermostat", "Switching on heater " + t.name)
			notifyMyAndroid("Thermostat", "Switching on heater in " +t.name)
		}else if (!below && heater.state!=OFF) {
			heater.sendCommand(OFF)
			logDebug("thermostat", "Switching off heater " + t.name)
			notifyMyAndroid("Thermostat", "Switching off heater in " +t.name)
		}
		logDebug("thermostat","test")
		logDebug("thermostat",t.name  +": current day is " + day +  ",  current hour is " +hour + ", and the temperature target is  " +temperatureTarget.get(day*24+hour)+ ".  The temperature is " +currentTemperature+ ", the heating rate is  "  +heatingRate +  ", and the heater is  " +heater.state)
		if(AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("Temperature")).head.historicState(now.minusMinutes(15)).state>currentTemperature && heater.state ==ON){
			//Error
			logDebug("thermostat", "Heater is on, but getting colder. Maybe it is empty?")
			notifyMyAndroid("Thermostat", "It's getting colder when the heater is on in " +t.name)
		}
		if(AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("Temperature")).head.historicState(now.minusMinutes(15)).state<currentTemperature && heater.state ==OFF){
			logDebug("thermostat", "It is getting warmer, but heater is off, turning it off again just in case")
			notifyMyAndroid("Thermostat", "It is getting warmer despite the heater being off, switching it off again in " +t.name)
			heater.sendCommand(OFF)
		}
		
	]
end
