import org.openhab.core.library.types.*
import org.openhab.core.library.items.*
import java.util.*


rule thermostat_init
when System started
then
   ThermostatSettings?.members.forEach(therm|                 // Set default values for all modes, up to the user to review them in GUI
       if (therm.state == Uninitialized) therm.postUpdatethey will then be persisted 
              
    )
end

rule check_thermostat
when Time cron  "0 * * * * ?"
then
	
	AllThermostats?.members.forEach[t|
		logDebug("thermostat",t.name)
		var temperatureTarget=AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("ThermostatSettings")).head.state.toString.split(",")
		var heater = AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("Heater")).head
		///var heatingRate = AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("HeatingRate")).head.state  as DecimalType
		var currentTemperature=AllThermostats.allMembers.filter(m | m.groupNames.contains(t.name)).filter(n  | n.name.contains("Temperature")).head.state as DecimalType
		var day= new  Date().day as Integer
		var hour=new Date ().hours as Integer
		logDebug("thermostat","Current day is " + day +  ",  current hour is " +hour + ", and the temperature target is  " +temperatureTarget.get(day*24+hour)+ ".  The temperature is " +currentTemperature+ "  and the heater is  " +heater.state)
	]
end
